<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.t0tec.tutorials</groupId>
    <artifactId>jpa-mysql-postgresql</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <hibernate.version>4.3.8.Final</hibernate.version>
        <postgresql.version>9.3-1102-jdbc41</postgresql.version>
        <mysql.version>5.1.34</mysql.version>
        <slf4j.version>1.7.10</slf4j.version>
        <logback.version>1.1.2</logback.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
            <version>${hibernate.version}</version>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${postgresql.version}</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.version}</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-hikaricp</artifactId>
            <version>${hibernate.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <version>${logback.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-tools</artifactId>
            <version>3.2.4.GA</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <artifactId>commons-logging</artifactId>
                    <groupId>commons-logging</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>${slf4j.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.7</version>
                <executions>
                    <execution>
                        <!-- Hibernatetool will generate everything before running tests -->
                        <phase>test-compile</phase>
                        <configuration>
                            <target>
                                <!-- For an introduction to the <hibernatetool> Ant Task see http://docs.jboss.org/tools/4.1.0.Final/en/hibernatetools/html_single/index.html#ant -->
                                <echo message="Ant target, through maven-antrun-plugin, started" />

                                <property name="maven_compile_classpath" refid="maven.compile.classpath" />
                                <property name="maven_test_classpath" refid="maven.test.classpath" />
                                <path id="hibernatetool.path">
                                    <!-- Despite what states the documentation about referencing the
                                        Maven classpaths at http://maven.apache.org/plugins/maven-antrun-plugin/examples/classpaths.html
                                        writing: <pathelement path="maven.test.classpath" /> does not work for this
                                        project. So I have set ant properties that refer to appropriate Maven classpathes. -->
                                    <pathelement path="${maven_compile_classpath}" />
                                    <pathelement path="${maven_test_classpath}" />
                                </path>

                                <!-- As described in "Using tasks not included in Ant's default jar"
                                    at http://maven.apache.org/plugins/maven-antrun-plugin/examples/customTasks.html
                                    I should have: * used classpathref="maven.plugin.classpath" * written all
                                    hibernatetool dependencies but because there are too many dependencies to
                                    write, as shown at http://mvnrepository.com/artifact/org.hibernate/hibernate-tools/4.0.0-CR1,
                                    I have preferred to leverage on Maven dependency management. So I have declared
                                    hibernate-tools artifact as one of my project dependency leaving Maven finding
                                    out the transitive dependencies. But because dependencies on maven.plugin.classpath
                                    are not packaged in the jar I have explicity excluded hibernate-tools, and
                                    its dependencies, from my project packaging declaring them in the "test"
                                    scope. Thus hibernate-tools dependencies were both on the maven.compile.classpath
                                    and the maven.test.classpath, so I have defined a "hibernatetool.path" that
                                    groups the compile and the test classpath. -->
                                <taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask"
                                         classpathref="hibernatetool.path" />

                                <property name="generatedByHibernate.outputDirectory"
                                          value="${project.build.directory}/generated/hibernatetool" />
                                <mkdir dir="${generatedByHibernate.outputDirectory}" />

                                <hibernatetool destdir="${generatedByHibernate.outputDirectory}">
                                    <classpath>
                                        <path location="${project.build.directory}/classes" />
                                    </classpath>
                                    <configuration
                                            configurationfile="${project.build.directory}/classes/META-INF/persistence.xml" />
                                    <hbm2ddl export="true" drop="true" create="true"
                                             outputfilename="helloworld.ddl" format="true" />
                                </hibernatetool>

                                <echo message="Ant target, through maven-antrun-plugin, terminated" />
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <!--This plugin's configuration is used to store Eclipse m2e settings
                    only. It has no influence on the Maven build itself. -->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>
                                            org.apache.maven.plugins
                                        </groupId>
                                        <artifactId>
                                            maven-antrun-plugin
                                        </artifactId>
                                        <versionRange>
                                            [1.7,)
                                        </versionRange>
                                        <goals>
                                            <goal>run</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore></ignore>
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>
